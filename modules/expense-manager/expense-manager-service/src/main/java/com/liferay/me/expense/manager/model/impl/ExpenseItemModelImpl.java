/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.me.expense.manager.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.me.expense.manager.model.ExpenseItem;
import com.liferay.me.expense.manager.model.ExpenseItemModel;
import com.liferay.me.expense.manager.model.ExpenseItemSoap;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ExpenseItem service. Represents a row in the &quot;ExpenseManager_ExpenseItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ExpenseItemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExpenseItemImpl}.
 * </p>
 *
 * @author Mahmoud Hussein Tayem
 * @see ExpenseItemImpl
 * @generated
 */
@JSON(strict = true)
public class ExpenseItemModelImpl
	extends BaseModelImpl<ExpenseItem> implements ExpenseItemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a expense item model instance should use the <code>ExpenseItem</code> interface instead.
	 */
	public static final String TABLE_NAME = "ExpenseManager_ExpenseItem";

	public static final Object[][] TABLE_COLUMNS = {
		{"expenseItemId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"dateIncurred", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"type_", Types.BIGINT}, {"reimburse", Types.BOOLEAN},
		{"amount", Types.BIGINT}, {"expenseId", Types.BIGINT},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("expenseItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateIncurred", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("reimburse", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("amount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("expenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ExpenseManager_ExpenseItem (expenseItemId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dateIncurred DATE null,title VARCHAR(75) null,description STRING null,type_ LONG,reimburse BOOLEAN,amount LONG,expenseId LONG,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table ExpenseManager_ExpenseItem";

	public static final String ORDER_BY_JPQL =
		" ORDER BY expenseItem.expenseItemId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ExpenseManager_ExpenseItem.expenseItemId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPENSEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPENSEITEMID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ExpenseItem toModel(ExpenseItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ExpenseItem model = new ExpenseItemImpl();

		model.setExpenseItemId(soapModel.getExpenseItemId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDateIncurred(soapModel.getDateIncurred());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setType(soapModel.getType());
		model.setReimburse(soapModel.isReimburse());
		model.setAmount(soapModel.getAmount());
		model.setExpenseId(soapModel.getExpenseId());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ExpenseItem> toModels(ExpenseItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ExpenseItem> models = new ArrayList<ExpenseItem>(
			soapModels.length);

		for (ExpenseItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ExpenseItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _expenseItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExpenseItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _expenseItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExpenseItem.class;
	}

	@Override
	public String getModelClassName() {
		return ExpenseItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ExpenseItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ExpenseItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExpenseItem, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ExpenseItem)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ExpenseItem, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ExpenseItem, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ExpenseItem)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ExpenseItem, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ExpenseItem, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ExpenseItem>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ExpenseItem.class.getClassLoader(), ExpenseItem.class,
			ModelWrapper.class);

		try {
			Constructor<ExpenseItem> constructor =
				(Constructor<ExpenseItem>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ExpenseItem, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ExpenseItem, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ExpenseItem, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ExpenseItem, Object>>();
		Map<String, BiConsumer<ExpenseItem, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ExpenseItem, ?>>();

		attributeGetterFunctions.put(
			"expenseItemId", ExpenseItem::getExpenseItemId);
		attributeSetterBiConsumers.put(
			"expenseItemId",
			(BiConsumer<ExpenseItem, Long>)ExpenseItem::setExpenseItemId);
		attributeGetterFunctions.put("groupId", ExpenseItem::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<ExpenseItem, Long>)ExpenseItem::setGroupId);
		attributeGetterFunctions.put("companyId", ExpenseItem::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ExpenseItem, Long>)ExpenseItem::setCompanyId);
		attributeGetterFunctions.put("userId", ExpenseItem::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<ExpenseItem, Long>)ExpenseItem::setUserId);
		attributeGetterFunctions.put("userName", ExpenseItem::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ExpenseItem, String>)ExpenseItem::setUserName);
		attributeGetterFunctions.put("createDate", ExpenseItem::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ExpenseItem, Date>)ExpenseItem::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ExpenseItem::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ExpenseItem, Date>)ExpenseItem::setModifiedDate);
		attributeGetterFunctions.put(
			"dateIncurred", ExpenseItem::getDateIncurred);
		attributeSetterBiConsumers.put(
			"dateIncurred",
			(BiConsumer<ExpenseItem, Date>)ExpenseItem::setDateIncurred);
		attributeGetterFunctions.put("title", ExpenseItem::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<ExpenseItem, String>)ExpenseItem::setTitle);
		attributeGetterFunctions.put(
			"description", ExpenseItem::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<ExpenseItem, String>)ExpenseItem::setDescription);
		attributeGetterFunctions.put("type", ExpenseItem::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<ExpenseItem, Long>)ExpenseItem::setType);
		attributeGetterFunctions.put("reimburse", ExpenseItem::getReimburse);
		attributeSetterBiConsumers.put(
			"reimburse",
			(BiConsumer<ExpenseItem, Boolean>)ExpenseItem::setReimburse);
		attributeGetterFunctions.put("amount", ExpenseItem::getAmount);
		attributeSetterBiConsumers.put(
			"amount", (BiConsumer<ExpenseItem, Long>)ExpenseItem::setAmount);
		attributeGetterFunctions.put("expenseId", ExpenseItem::getExpenseId);
		attributeSetterBiConsumers.put(
			"expenseId",
			(BiConsumer<ExpenseItem, Long>)ExpenseItem::setExpenseId);
		attributeGetterFunctions.put(
			"statusByUserId", ExpenseItem::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<ExpenseItem, Long>)ExpenseItem::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", ExpenseItem::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<ExpenseItem, String>)ExpenseItem::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", ExpenseItem::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<ExpenseItem, Date>)ExpenseItem::setStatusDate);
		attributeGetterFunctions.put("status", ExpenseItem::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<ExpenseItem, Integer>)ExpenseItem::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getExpenseItemId() {
		return _expenseItemId;
	}

	@Override
	public void setExpenseItemId(long expenseItemId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expenseItemId = expenseItemId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalExpenseItemId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("expenseItemId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getDateIncurred() {
		return _dateIncurred;
	}

	@Override
	public void setDateIncurred(Date dateIncurred) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateIncurred = dateIncurred;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public long getType() {
		return _type;
	}

	@Override
	public void setType(long type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	@JSON
	@Override
	public boolean getReimburse() {
		return _reimburse;
	}

	@JSON
	@Override
	public boolean isReimburse() {
		return _reimburse;
	}

	@Override
	public void setReimburse(boolean reimburse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reimburse = reimburse;
	}

	@JSON
	@Override
	public Long getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(Long amount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amount = amount;
	}

	@JSON
	@Override
	public long getExpenseId() {
		return _expenseId;
	}

	@Override
	public void setExpenseId(long expenseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expenseId = expenseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalExpenseId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("expenseId"));
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ExpenseItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExpenseItem toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ExpenseItem>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExpenseItemImpl expenseItemImpl = new ExpenseItemImpl();

		expenseItemImpl.setExpenseItemId(getExpenseItemId());
		expenseItemImpl.setGroupId(getGroupId());
		expenseItemImpl.setCompanyId(getCompanyId());
		expenseItemImpl.setUserId(getUserId());
		expenseItemImpl.setUserName(getUserName());
		expenseItemImpl.setCreateDate(getCreateDate());
		expenseItemImpl.setModifiedDate(getModifiedDate());
		expenseItemImpl.setDateIncurred(getDateIncurred());
		expenseItemImpl.setTitle(getTitle());
		expenseItemImpl.setDescription(getDescription());
		expenseItemImpl.setType(getType());
		expenseItemImpl.setReimburse(isReimburse());
		expenseItemImpl.setAmount(getAmount());
		expenseItemImpl.setExpenseId(getExpenseId());
		expenseItemImpl.setStatusByUserId(getStatusByUserId());
		expenseItemImpl.setStatusByUserName(getStatusByUserName());
		expenseItemImpl.setStatusDate(getStatusDate());
		expenseItemImpl.setStatus(getStatus());

		expenseItemImpl.resetOriginalValues();

		return expenseItemImpl;
	}

	@Override
	public int compareTo(ExpenseItem expenseItem) {
		long primaryKey = expenseItem.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ExpenseItem)) {
			return false;
		}

		ExpenseItem expenseItem = (ExpenseItem)object;

		long primaryKey = expenseItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ExpenseItem> toCacheModel() {
		ExpenseItemCacheModel expenseItemCacheModel =
			new ExpenseItemCacheModel();

		expenseItemCacheModel.expenseItemId = getExpenseItemId();

		expenseItemCacheModel.groupId = getGroupId();

		expenseItemCacheModel.companyId = getCompanyId();

		expenseItemCacheModel.userId = getUserId();

		expenseItemCacheModel.userName = getUserName();

		String userName = expenseItemCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			expenseItemCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			expenseItemCacheModel.createDate = createDate.getTime();
		}
		else {
			expenseItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			expenseItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			expenseItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date dateIncurred = getDateIncurred();

		if (dateIncurred != null) {
			expenseItemCacheModel.dateIncurred = dateIncurred.getTime();
		}
		else {
			expenseItemCacheModel.dateIncurred = Long.MIN_VALUE;
		}

		expenseItemCacheModel.title = getTitle();

		String title = expenseItemCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			expenseItemCacheModel.title = null;
		}

		expenseItemCacheModel.description = getDescription();

		String description = expenseItemCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			expenseItemCacheModel.description = null;
		}

		expenseItemCacheModel.type = getType();

		expenseItemCacheModel.reimburse = isReimburse();

		Long amount = getAmount();

		if (amount != null) {
			expenseItemCacheModel.amount = amount;
		}

		expenseItemCacheModel.expenseId = getExpenseId();

		expenseItemCacheModel.statusByUserId = getStatusByUserId();

		expenseItemCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = expenseItemCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			expenseItemCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			expenseItemCacheModel.statusDate = statusDate.getTime();
		}
		else {
			expenseItemCacheModel.statusDate = Long.MIN_VALUE;
		}

		expenseItemCacheModel.status = getStatus();

		return expenseItemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ExpenseItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ExpenseItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExpenseItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ExpenseItem)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ExpenseItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ExpenseItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExpenseItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ExpenseItem)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ExpenseItem>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _expenseItemId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _dateIncurred;
	private String _title;
	private String _description;
	private long _type;
	private boolean _reimburse;
	private Long _amount;
	private long _expenseId;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ExpenseItem, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ExpenseItem)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("expenseItemId", _expenseItemId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("dateIncurred", _dateIncurred);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("reimburse", _reimburse);
		_columnOriginalValues.put("amount", _amount);
		_columnOriginalValues.put("expenseId", _expenseId);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("status", _status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("expenseItemId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("dateIncurred", 128L);

		columnBitmasks.put("title", 256L);

		columnBitmasks.put("description", 512L);

		columnBitmasks.put("type_", 1024L);

		columnBitmasks.put("reimburse", 2048L);

		columnBitmasks.put("amount", 4096L);

		columnBitmasks.put("expenseId", 8192L);

		columnBitmasks.put("statusByUserId", 16384L);

		columnBitmasks.put("statusByUserName", 32768L);

		columnBitmasks.put("statusDate", 65536L);

		columnBitmasks.put("status", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ExpenseItem _escapedModel;

}